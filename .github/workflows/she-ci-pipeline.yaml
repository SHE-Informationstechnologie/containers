name: 'SHE CI Pipeline'

env:
  REGISTRY: ghcr.io

on:
  schedule: 
    - cron: '0 0 * * *'  # Run daily at 00:00 UTC
  workflow_dispatch:       # Allow manual triggering
  pull_request:
    branches: ["main"]     # Build PRs targeting main
  push:
    branches: ["main"]     # Build on pushes to main

permissions:
  contents: read
  packages: write           # Required for pushing to GHCR

jobs:
  container-build-and-push:                 # (previously: build-containers-we-care-about)
    runs-on: ubuntu-latest
    name: SHE Build
    strategy:
      max-parallel: 3                       # Up to 3 builds in parallel
      matrix:
        container: ["os-shell", "postgresql", "postgres-exporter", "redis-cluster", "redis-exporter", "minio", "minio-client", "minio-object-browser"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase owner name
        # Exposes OWNER_LC to all subsequent steps via $GITHUB_ENV
        run: |
          echo "OWNER_LC=${OWNER,,}" >> "${GITHUB_ENV}"
        env:
          OWNER: ${{ github.repository_owner }}

      - name: Find Dockerfiles
        id: find-dockerfiles
        run: |
          cd "${{ github.workspace }}/bitnami/${{ matrix.container }}"
          
          # Recursively find all Dockerfiles
          dockerfiles=$(find . -name "Dockerfile" -type f)
          
          if [ -z "$dockerfiles" ]; then
            echo "No Dockerfiles found for ${{ matrix.container }}"
            exit 1
          fi
          
          echo "Found Dockerfiles:"
          echo "$dockerfiles"
          
          # Pass list to subsequent steps
          echo "dockerfiles<<EOF" >> $GITHUB_OUTPUT
          echo "$dockerfiles" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Process Dockerfiles
        id: process-dockerfiles
        run: |
          cd "${{ github.workspace }}/bitnami/${{ matrix.container }}"
          
          dockerfiles="${{ steps.find-dockerfiles.outputs.dockerfiles }}"
          
          # Collect build metadata: path, final tag, base version
          build_info=""
          for dockerfile in $dockerfiles; do
            dockerfile_dir=$(dirname "$dockerfile")
            echo "Processing Dockerfile: $dockerfile in directory: $dockerfile_dir"
            
            cd "${{ github.workspace }}/bitnami/${{ matrix.container }}/$dockerfile_dir"
            
            # Extract version from label
            version=$(grep 'org.opencontainers.image.version=' Dockerfile | sed 's/.*org.opencontainers.image.version="\([^"]*\)".*/\1/')
            
            # Prefer OS flavour from ENV OS_FLAVOUR
            os_flavour=$(grep '^ENV.*OS_FLAVOUR=' Dockerfile | sed 's/.*OS_FLAVOUR="\([^"]*\)".*/\1/' | head -1)
            
            # Image revision (ENV/variable)
            image_revision=$(grep 'IMAGE_REVISION=' Dockerfile | sed 's/.*IMAGE_REVISION="\([^"]*\)".*/\1/' | head -1)
            
            if [ -z "$version" ]; then
              echo "Warning: Could not extract version from Dockerfile, using 'latest'"
              version="latest"
            fi
            
            echo "Found version: $version"
            echo "Found OS flavour: $os_flavour"
            echo "Found image revision: $image_revision"
            
            # Tag format: version[-os_flavour][-rREV]
            full_tag="$version"
            
            # Add OS flavour
            if [ -n "$os_flavour" ]; then
              full_tag="${full_tag}-${os_flavour}"
            else
              # Fallback: derive from directory path (e.g., debian-12)
              distro=$(echo "$dockerfile_dir" | grep -o '[a-z]*-[0-9]*' | head -1 || echo "")
              if [ -n "$distro" ]; then
                full_tag="${full_tag}-${distro}"
                os_flavour="$distro"
              fi
            fi
            
            # Add revision with "r" prefix
            if [ -n "$image_revision" ]; then
              full_tag="${full_tag}-r${image_revision}"
              echo "Added revision: r${image_revision}"
            else
              echo "Warning: No IMAGE_REVISION found in Dockerfile"
            fi
            
            echo "Final full tag: $full_tag"
            
            # Aggregate build info
            if [ -n "$build_info" ]; then
              build_info="${build_info}|"
            fi
            build_info="${build_info}${dockerfile_dir}:${full_tag}:${version}"
          done
          
          echo "build-info=$build_info" >> $GITHUB_OUTPUT
          echo "Build info collected: $build_info"

      - name: Check Existing Images
        id: check-images
        run: |
          cd "${{ github.workspace }}/bitnami/${{ matrix.container }}"
          
          build_info="${{ steps.process-dockerfiles.outputs.build-info }}"
          images_to_build=""
          
          IFS='|' read -ra BUILDS <<< "$build_info"
          for build in "${BUILDS[@]}"; do
            IFS=':' read -ra BUILD_PARTS <<< "$build"
            dockerfile_dir="${BUILD_PARTS[0]}"
            full_tag="${BUILD_PARTS[1]}"
            base_version="${BUILD_PARTS[2]}"
            
            registry_tag="${{ env.REGISTRY }}/${OWNER_LC}/bitnami-${{ matrix.container }}:$full_tag"
            echo "Checking if $registry_tag already exists..."
            
            if docker manifest inspect "$registry_tag" > /dev/null 2>&1; then
              echo "âœ… Exists: $registry_tag (skip build)"
            else
              echo "ðŸ§± Missing: $registry_tag (will build)"
              if [ -n "$images_to_build" ]; then
                images_to_build="${images_to_build}|"
              fi
              images_to_build="${images_to_build}${dockerfile_dir}:${full_tag}:${base_version}"
            fi
          done
          
          echo "images-to-build=$images_to_build" >> $GITHUB_OUTPUT
          echo "Images to build: $images_to_build"

      - name: Build Container Images
        if: steps.check-images.outputs.images-to-build != ''
        run: |
          cd "${{ github.workspace }}/bitnami/${{ matrix.container }}"
          
          images_to_build="${{ steps.check-images.outputs.images-to-build }}"
          
          IFS='|' read -ra BUILDS <<< "$images_to_build"
          for build in "${BUILDS[@]}"; do
            IFS=':' read -ra BUILD_PARTS <<< "$build"
            dockerfile_dir="${BUILD_PARTS[0]}"
            full_tag="${BUILD_PARTS[1]}"
            base_version="${BUILD_PARTS[2]}"
            
            echo "Building image for $dockerfile_dir with full tag $full_tag"
            cd "${{ github.workspace }}/bitnami/${{ matrix.container }}/$dockerfile_dir"
            
            # Build with a temporary tag, then retag
            temp_tag="temp-bitnami-${{ matrix.container }}-$(basename "$dockerfile_dir")-$(date +%s)"
            echo "docker build -t $temp_tag ."
            docker build -t "$temp_tag" .
            echo "Build completed for $temp_tag"
            
            # Final tags (local & registry)
            final_tag_full="bitnami-${{ matrix.container }}:$full_tag"
            final_tag_base="bitnami-${{ matrix.container }}:$base_version"
            registry_tag_full="${{ env.REGISTRY }}/${OWNER_LC}/bitnami-${{ matrix.container }}:$full_tag"
            registry_tag_base="${{ env.REGISTRY }}/${OWNER_LC}/bitnami-${{ matrix.container }}:$base_version"
            
            echo "Tagging $temp_tag:"
            echo "  -> $final_tag_full"
            echo "  -> $final_tag_base"
            echo "  -> $registry_tag_full"
            echo "  -> $registry_tag_base"
            
            docker tag "$temp_tag" "$final_tag_full"
            docker tag "$temp_tag" "$final_tag_base"
            docker tag "$temp_tag" "$registry_tag_full"
            docker tag "$temp_tag" "$registry_tag_base"
            docker rmi "$temp_tag"
            
            echo "âœ… Tags created for $dockerfile_dir"
          done

      - name: Push Images to Registry
        if: steps.check-images.outputs.images-to-build != '' && github.ref == 'refs/heads/main'
        run: |
          images_to_build="${{ steps.check-images.outputs.images-to-build }}"
          
          echo "On main branch: pushing images to GHCR"
          
          IFS='|' read -ra BUILDS <<< "$images_to_build"
          for build in "${BUILDS[@]}"; do
            IFS=':' read -ra BUILD_PARTS <<< "$build"
            dockerfile_dir="${BUILD_PARTS[0]}"
            full_tag="${BUILD_PARTS[1]}"
            base_version="${BUILD_PARTS[2]}"
            
            registry_tag_full="${{ env.REGISTRY }}/${OWNER_LC}/bitnami-${{ matrix.container }}:$full_tag"
            registry_tag_base="${{ env.REGISTRY }}/${OWNER_LC}/bitnami-${{ matrix.container }}:$base_version"
            
            echo "Pushing $registry_tag_full"
            docker push "$registry_tag_full"
            echo "Pushing $registry_tag_base"
            docker push "$registry_tag_base"
          done
          
          echo "âœ… Push complete"

      - name: Skip Push (Not Main Branch)
        if: steps.check-images.outputs.images-to-build != '' && github.ref != 'refs/heads/main'
        run: |
          echo "Not on main (current: ${{ github.ref }}), skipping push to GHCR"
          echo "Images built but not pushed:"
          
          images_to_build="${{ steps.check-images.outputs.images-to-build }}"
          
          IFS='|' read -ra BUILDS <<< "$images_to_build"
          for build in "${BUILDS[@]}"; do
            IFS=':' read -ra BUILD_PARTS <<< "$build"
            dockerfile_dir="${BUILD_PARTS[0]}"
            full_tag="${BUILD_PARTS[1]}"
            base_version="${BUILD_PARTS[2]}"
            
            registry_tag_full="${{ env.REGISTRY }}/${OWNER_LC}/bitnami-${{ matrix.container }}:$full_tag"
            registry_tag_base="${{ env.REGISTRY }}/${OWNER_LC}/bitnami-${{ matrix.container }}:$base_version"
            
            echo "  - Full tag: $registry_tag_full"
            echo "  - Base tag: $registry_tag_base"
            echo ""
